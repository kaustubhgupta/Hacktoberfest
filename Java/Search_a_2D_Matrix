/*

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

*/


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
       if (matrix.length == 0 || matrix == null || matrix[0].length == 0) {
            return false;
        }
        
        int r=matrix.length;
        int c=matrix[0].length;
        int i;
        int row=0;
        for(i=0;i<r;i++){
            if(matrix[i][0]==target){
                return true;
            }
            else if(matrix[i][0]<target){
                row=i;
            }
            else{
                break;
            }
        }
        
        for(i=0;i<matrix[row].length;i++){
            if(matrix[row][i]==target){
                return true;
            }
        }
        
        return false;
    }
}
